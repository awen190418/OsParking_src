/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.osparking.managedata;

import static com.mysql.jdbc.MysqlErrorNumbers.ER_DUP_ENTRY;
import static com.osparking.global.CommonData.deleteTable;
import com.osparking.global.Globals;
import static com.osparking.global.Globals.OSPiconList;
import static com.osparking.global.Globals.closeDBstuff;
import com.osparking.global.names.ControlEnums;
import static com.osparking.global.names.ControlEnums.DialogMessages.USER_DELETE_CONF_1;
import static com.osparking.global.names.ControlEnums.DialogMessages.USER_DELETE_CONF_2;
import static com.osparking.global.names.ControlEnums.DialogMessages.USER_DELETE_CONF_3;
import static com.osparking.global.names.ControlEnums.DialogMessages.USER_DELETE_CONF_TITLE;
import static com.osparking.global.names.ControlEnums.RowName.*;
import com.osparking.global.names.DB_Access;
import static com.osparking.global.names.DB_Access.getRecordCount;
import static com.osparking.global.names.DB_Access.readSettings;
import com.osparking.global.names.IDevice.IDataMan;
import com.osparking.global.names.JDBCMySQL;
import static com.osparking.global.names.JDBCMySQL.PASSWORD;
import static com.osparking.global.names.JDBCMySQL.getConnection;
import com.osparking.global.names.OSP_enums.DriverCol;
import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.OK_CANCEL_OPTION;
import static javax.swing.JOptionPane.OK_OPTION;
import static javax.swing.JOptionPane.QUESTION_MESSAGE;
import javax.swing.RootPaneContainer;
import javax.swing.SwingUtilities;

/**
 *
 * @author Open Source Parking, Inc.(www.osparking.com)
 */
public class DataGUI extends javax.swing.JFrame {
    Object[] L2_sn_arr = null;
    Object[] unit_sn_arr = null;
    Object[] driver_sn_arr = null;
    JFrame settingsForm = null;
    ProgressBarMan progressBarMan;
    /**
     * Creates new form InsertGUI
     */
    public DataGUI(JFrame settingsForm) {
        initComponents();
        setIconImages(OSPiconList);   
        
        updateAttendantCount();
        updateBuildingCount();
        updateAffiliCount();
        updateDriverCount();
        updateVehicleCount();
        this.settingsForm = settingsForm;
        progressBarMan = new ProgressBarMan(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        quitProgram = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        general100 = new javax.swing.JButton();
        manager5 = new javax.swing.JButton();
        deleteAll_no_admin = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        attendantCount = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        affiliationsButton = new javax.swing.JButton();
        buildingsButton = new javax.swing.JButton();
        deleteAffiliation = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        L1_Count = new javax.swing.JLabel();
        buildCount = new javax.swing.JLabel();
        L2_Count = new javax.swing.JLabel();
        unitCount = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        insertDrivers = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        driverCount = new javax.swing.JLabel();
        deleteDrivers = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        insertVehicles = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        vehicleCount = new javax.swing.JLabel();
        deleteVehicles = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        deleteLogins = new javax.swing.JButton();
        deleteSysRun = new javax.swing.JButton();
        deleteArrivals = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage OsParking Data");
        setResizable(false);

        quitProgram.setMnemonic('X');
        quitProgram.setText("Exit(X)");
        quitProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitProgramActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Attendants"));

        general100.setText("100 guests");
        general100.setToolTipText("Creates oguest1 to oguest100");
        general100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                general100ActionPerformed(evt);
            }
        });

        manager5.setText("5 managers");
        manager5.setToolTipText("Creates manager1 to manager5");
        manager5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manager5ActionPerformed(evt);
            }
        });

        deleteAll_no_admin.setText("Del all (!admin)");
        deleteAll_no_admin.setToolTipText("Delete users except 'admin'. Related car arrival and login records are deleted, too.");
        deleteAll_no_admin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAll_no_adminActionPerformed(evt);
            }
        });

        jLabel7.setText("count:");

        attendantCount.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manager5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteAll_no_admin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(attendantCount, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(general100, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteAll_no_admin, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(manager5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(general100, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(attendantCount))
                .addGap(18, 18, 18))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Affili & Building"));

        affiliationsButton.setText("Insert Affiliations");
        affiliationsButton.setToolTipText("Inserts higher and lower affiliations.");
        affiliationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                affiliationsButtonActionPerformed(evt);
            }
        });

        buildingsButton.setText("Insert Buildings");
        buildingsButton.setToolTipText("Insert building and unit numbers.");
        buildingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingsButtonActionPerformed(evt);
            }
        });

        deleteAffiliation.setText("Delete affili/build");
        deleteAffiliation.setToolTipText("Deletes affiliations and buildings and units.");
        deleteAffiliation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAffiliationActionPerformed(evt);
            }
        });

        jLabel3.setText("L1:");

        L1_Count.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        L1_Count.setText("0");

        buildCount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        buildCount.setText("0");

        L2_Count.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        L2_Count.setText("0");

        unitCount.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        unitCount.setText("0");

        jLabel4.setText("L2:");

        jLabel5.setText("Bd:");

        jLabel6.setText("Ut:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(L1_Count, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(L2_Count, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteAffiliation, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buildCount, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(unitCount, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(buildingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(affiliationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteAffiliation, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(affiliationsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L1_Count)
                    .addComponent(L2_Count)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(15, 15, 15)
                .addComponent(buildingsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(unitCount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buildCount)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6)))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Drivers"));

        insertDrivers.setText("Insert Drivers");
        insertDrivers.setToolTipText("Inserts 1000 drivers with random affiliation.");
        insertDrivers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertDriversActionPerformed(evt);
            }
        });

        jLabel2.setText("count:");

        driverCount.setText("0");

        deleteDrivers.setText("Delete all drivers");
        deleteDrivers.setToolTipText("Deletes all driver records.");
        deleteDrivers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDriversActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(driverCount, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(insertDrivers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteDrivers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteDrivers, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(insertDrivers, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(driverCount))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Vehicles"));

        insertVehicles.setText("Insert 1K cars");
        insertVehicles.setToolTipText("Inserts 1000 cars with many random properties. 4 of them are with images.");
        insertVehicles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertVehiclesActionPerformed(evt);
            }
        });

        jLabel1.setText("count:");

        vehicleCount.setText("0");

        deleteVehicles.setText("Delete all cars");
        deleteVehicles.setToolTipText("Deletes every registered cars.");
        deleteVehicles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteVehiclesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(insertVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vehicleCount, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(insertVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(vehicleCount))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Clear Records"));

        deleteLogins.setText("Logins");
        deleteLogins.setToolTipText("Deletes affiliations and buildings and units.");
        deleteLogins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLoginsActionPerformed(evt);
            }
        });

        deleteSysRun.setText("System Run");
        deleteSysRun.setToolTipText("Deletes affiliations and buildings and units.");
        deleteSysRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSysRunActionPerformed(evt);
            }
        });

        deleteArrivals.setText("Arrivals");
        deleteArrivals.setToolTipText("Deletes affiliations and buildings and units.");
        deleteArrivals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteArrivalsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteLogins)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(deleteSysRun)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(deleteArrivals)
                .addGap(15, 15, 15))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteArrivals, deleteLogins, deleteSysRun});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteLogins, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteSysRun, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteArrivals, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(quitProgram)))))
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quitProgram, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void manager5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manager5ActionPerformed
        DB_Access.makeSureBasicUserExistance();

        int result = 0; 
        for (int idx = 1; idx <= 5; idx++) {
            result += createUser("manager", idx, true);
        }
        updateAttendantCount();
    }//GEN-LAST:event_manager5ActionPerformed

    private void updateAttendantCount() {
        attendantCount.setText(String.valueOf(getRecordCount("users_osp", -1)));    
    }
    
    private void general100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_general100ActionPerformed
        DB_Access.makeSureBasicUserExistance();

        int result = 0; 
        for (int idx = 1; idx <= 100; idx++) {
            result += createUser("oguest", idx, false);
        }
        updateAttendantCount();
    }//GEN-LAST:event_general100ActionPerformed

    private void deleteAll_no_adminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAll_no_adminActionPerformed
       /**
         * Delete car arrival and login records too.
         * Let the user know about this catestropic delete beforehand.
         */
        String msg = USER_DELETE_CONF_1.getContent() + System.lineSeparator()
                + System.lineSeparator()
                + USER_DELETE_CONF_2.getContent() + System.lineSeparator()
                + System.lineSeparator()
                + USER_DELETE_CONF_3.getContent() + System.lineSeparator();
        int response = JOptionPane.showConfirmDialog(null, msg, USER_DELETE_CONF_TITLE.getContent(),
                OK_CANCEL_OPTION, QUESTION_MESSAGE);
        
        if (response != OK_OPTION) {
            return;
        } else {
            deleteTable(this, "loginrecord", "userID <> 'admin'", LOG_IN.getContent());
            deleteTable(this, "car_arrival", "AttendantID <> 'admin';", ARRIVAL.getContent());
            deleteTable(this, "users_osp", "id <> 'admin'", USER.getContent());

            updateAttendantCount();
        }
    }//GEN-LAST:event_deleteAll_no_adminActionPerformed

    private void quitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitProgramActionPerformed
        this.setVisible(false);
        if (settingsForm == null) {
            System.exit(0);
        } else {
            dispose();
            ((IDataMan)settingsForm).closeDialog();
        }
    }//GEN-LAST:event_quitProgramActionPerformed

    private void affiliationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affiliationsButtonActionPerformed
        /**
         * First, insert high level affiliation names.
         */
        String insertSQL = "INSERT INTO `l1_affiliation` VALUES "
                + "(51,'A사업본부'),(52,'B사업본부'),(54,'사장'),(53,'사장실');";
        
        int result = insertRedords(insertSQL);
        
        /**
         * Next, insert low level affiliation names.
         */        
        if (result == 4) {
            insertSQL = "INSERT INTO `l2_affiliation` VALUES (67,53,'기획실'),(60,51,'마케팅과'),"
                    + "(64,52,'마케팅과'),(59,51,'생산과'),(63,52,'생산과'),(62,51,'인사과'),"
                    + "(66,52,'인사과'),(61,51,'재무과'),(65,52,'재무과'), (68,54,'사장')";
            insertRedords(insertSQL);
        }
        updateAffiliCount();        
    }//GEN-LAST:event_affiliationsButtonActionPerformed

    private void buildingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingsButtonActionPerformed
   
        /**
         * First, insert building numbers.
         */
        String insertSQL = "INSERT INTO `building_table` VALUES (192,1),(193,2),(194,3),"
                + "(195,4),(196,5),(197,6)";
        
        int result = insertRedords(insertSQL);
        
        /**
         * Next, insert unit numbers per building numbers.
         */        
        if (result == 6) {
            insertSQL = "INSERT INTO `building_unit` VALUES (5439,101,192),(5440,102,192),"
                    + "(5441,103,192),(5442,105,192),(5443,106,192),(5444,201,192),(5445,202,192),"
                    + "(5446,203,192),(5447,205,192),(5448,206,192),(5449,301,192),(5450,302,192),"
                    + "(5451,303,192),(5452,305,192),(5453,306,192),(5454,401,192),(5455,402,192),"
                    + "(5456,403,192),(5457,405,192),(5458,406,192),(5459,501,192),(5460,502,192),"
                    + "(5461,503,192),(5462,505,192),(5463,506,192),(5464,601,192),(5465,602,192),"
                    + "(5466,603,192),(5467,605,192),(5468,606,192),(5469,701,192),(5470,702,192),"
                    + "(5471,703,192),(5472,705,192),(5473,706,192),(5474,801,192),(5475,802,192),"
                    + "(5476,803,192),(5477,805,192),(5478,806,192),(5479,901,192),(5480,902,192),"
                    + "(5481,903,192),(5482,905,192),(5483,906,192),(5484,1001,192),"
                    + "(5485,1002,192),(5486,1003,192),(5487,1005,192),(5488,1006,192),"
                    + "(5489,1101,192),(5490,1102,192),(5491,1103,192),(5492,1105,192),"
                    + "(5493,1106,192),(5494,1201,192),(5495,1202,192),(5496,1203,192),"
                    + "(5497,1205,192),(5498,1206,192),(5499,101,193),(5500,102,193),"
                    + "(5501,103,193),(5502,105,193),(5503,106,193),(5504,201,193),"
                    + "(5505,202,193),(5506,203,193),(5507,205,193),(5508,206,193),"
                    + "(5509,301,193),(5510,302,193),(5511,303,193),(5512,305,193),"
                    + "(5513,306,193),(5514,401,193),(5515,402,193),(5516,403,193),"
                    + "(5517,405,193),(5518,406,193),(5519,501,193),(5520,502,193),"
                    + "(5521,503,193),(5522,505,193),(5523,506,193),(5524,601,193),"
                    + "(5525,602,193),(5526,603,193),(5527,605,193),(5528,606,193),"
                    + "(5529,701,193),(5530,702,193),(5531,703,193),(5532,705,193),"
                    + "(5533,706,193),(5534,801,193),(5535,802,193),(5536,803,193),"
                    + "(5537,805,193),(5538,806,193),(5539,901,193),(5540,902,193),"
                    + "(5541,903,193),(5542,905,193),(5543,906,193),(5544,1001,193),"
                    + "(5545,1002,193),(5546,1003,193),(5547,1005,193),(5548,1006,193),"
                    + "(5549,1101,193),(5550,1102,193),(5551,1103,193),(5552,1105,193),"
                    + "(5553,1106,193),(5554,1201,193),(5555,1202,193),(5556,1203,193),"
                    + "(5557,1205,193),(5558,1206,193),(5559,101,194),(5560,102,194),"
                    + "(5561,103,194),(5562,105,194),(5563,201,194),(5564,202,194),"
                    + "(5565,203,194),(5566,205,194),(5567,301,194),(5568,302,194),"
                    + "(5569,303,194),(5570,305,194),(5571,401,194),(5572,402,194),"
                    + "(5573,403,194),(5574,405,194),(5575,501,194),(5576,502,194),"
                    + "(5577,503,194),(5578,505,194),(5579,601,194),(5580,602,194),"
                    + "(5581,603,194),(5582,605,194),(5583,701,194),(5584,702,194),"
                    + "(5585,703,194),(5586,705,194),(5587,801,194),(5588,802,194),"
                    + "(5589,803,194),(5590,805,194),(5591,901,194),(5592,902,194),"
                    + "(5593,903,194),(5594,905,194),(5595,1001,194),(5596,1002,194),"
                    + "(5597,1003,194),(5598,1005,194),(5599,1101,194),(5600,1102,194),"
                    + "(5601,1103,194),(5602,1105,194),(5603,1201,194),(5604,1202,194),"
                    + "(5605,1203,194),(5606,1205,194),(5607,101,195),(5608,102,195),"
                    + "(5609,103,195),(5610,105,195),(5611,106,195),(5612,201,195),"
                    + "(5613,202,195),(5614,203,195),(5615,205,195),(5616,206,195),"
                    + "(5617,301,195),(5618,302,195),(5619,303,195),(5620,305,195),"
                    + "(5621,306,195),(5622,401,195),(5623,402,195),(5624,403,195),"
                    + "(5625,405,195),(5626,406,195),(5627,501,195),(5628,502,195),"
                    + "(5629,503,195),(5630,505,195),(5631,506,195),(5632,601,195),"
                    + "(5633,602,195),(5634,603,195),(5635,605,195),(5636,606,195),"
                    + "(5637,701,195),(5638,702,195),(5639,703,195),(5640,705,195),"
                    + "(5641,706,195),(5642,801,195),(5643,802,195),(5644,803,195),"
                    + "(5645,805,195),(5646,806,195),(5647,901,195),(5648,902,195),"
                    + "(5649,903,195),(5650,905,195),(5651,906,195),(5652,1001,195),"
                    + "(5653,1002,195),(5654,1003,195),(5655,1005,195),(5656,1006,195),"
                    + "(5657,1101,195),(5658,1102,195),(5659,1103,195),(5660,1105,195),"
                    + "(5661,1106,195),(5662,1201,195),(5663,1202,195),(5664,1203,195),"
                    + "(5665,1205,195),(5666,1206,195),(5667,101,196),(5668,102,196),"
                    + "(5669,103,196),(5670,105,196),(5671,106,196),(5672,201,196),"
                    + "(5673,202,196),(5674,203,196),(5675,205,196),(5676,206,196),"
                    + "(5677,301,196),(5678,302,196),(5679,303,196),(5680,305,196),"
                    + "(5681,306,196),(5682,401,196),(5683,402,196),(5684,403,196),"
                    + "(5685,405,196),(5686,406,196),(5687,501,196),(5688,502,196),"
                    + "(5689,503,196),(5690,505,196),(5691,506,196),(5692,601,196),"
                    + "(5693,602,196),(5694,603,196),(5695,605,196),(5696,606,196),"
                    + "(5697,701,196),(5698,702,196),(5699,703,196),(5700,705,196),"
                    + "(5701,706,196),(5702,801,196),(5703,802,196),(5704,803,196),"
                    + "(5705,805,196),(5706,806,196),(5707,901,196),(5708,902,196),"
                    + "(5709,903,196),(5710,905,196),(5711,906,196),(5712,1001,196),"
                    + "(5713,1002,196),(5714,1003,196),(5715,1005,196),(5716,1006,196),"
                    + "(5717,1101,196),(5718,1102,196),(5719,1103,196),(5720,1105,196),"
                    + "(5721,1106,196),(5722,1201,196),(5723,1202,196),(5724,1203,196),"
                    + "(5725,1205,196),(5726,1206,196),(5727,101,197),(5728,102,197),"
                    + "(5729,103,197),(5730,105,197),(5731,106,197),(5732,107,197),"
                    + "(5733,108,197),(5734,109,197),(5735,201,197),(5736,202,197),"
                    + "(5737,203,197),(5738,205,197),(5739,206,197),(5740,207,197),"
                    + "(5741,208,197),(5742,209,197),(5743,301,197),(5744,302,197),"
                    + "(5745,303,197),(5746,305,197),(5747,306,197),(5748,307,197),"
                    + "(5749,308,197),(5750,309,197),(5751,401,197),(5752,402,197),"
                    + "(5753,403,197),(5754,405,197),(5755,406,197),(5756,407,197),"
                    + "(5757,408,197),(5758,409,197),(5759,501,197),(5760,502,197),"
                    + "(5761,503,197),(5762,505,197),(5763,506,197),(5764,507,197),"
                    + "(5765,508,197),(5766,509,197),(5767,601,197),(5768,602,197),"
                    + "(5769,603,197),(5770,605,197),(5771,606,197),(5772,607,197),"
                    + "(5773,608,197),(5774,609,197),(5775,701,197),(5776,702,197),"
                    + "(5777,703,197),(5778,705,197),(5779,706,197),(5780,707,197),"
                    + "(5781,708,197),(5782,709,197),(5783,801,197),(5784,802,197),"
                    + "(5785,803,197),(5786,805,197),(5787,806,197),(5788,807,197),"
                    + "(5789,808,197),(5790,809,197),(5791,901,197),(5792,902,197),"
                    + "(5793,903,197),(5794,905,197),(5795,906,197),(5796,907,197),"
                    + "(5797,908,197),(5798,909,197),(5799,1001,197),(5800,1002,197),"
                    + "(5801,1003,197),(5802,1005,197),(5803,1006,197),(5804,1007,197),"
                    + "(5805,1008,197),(5806,1009,197),(5807,1101,197),(5808,1102,197),"
                    + "(5809,1103,197),(5810,1105,197),(5811,1106,197),(5812,1107,197),"
                    + "(5813,1108,197),(5814,1109,197),(5815,1201,197),(5816,1202,197),"
                    + "(5817,1203,197),(5818,1205,197),(5819,1206,197),(5820,1207,197),"
                    + "(5821,1208,197),(5822,1209,197);";
            insertRedords(insertSQL);
        }
        updateBuildingCount();
    }//GEN-LAST:event_buildingsButtonActionPerformed

    private Object getRandomElement(Object[] objects) {
        Object object = null;
        
        int len = objects.length;
        Random r = new Random();
        int i = r.nextInt(len);
        return objects[i];
    }
    
    private String getRandomLastName() {
        String[] lastNames = {"김", "이", "박", "최", "정", "강", "조", "윤", "장", "임", 
            "오", "한", "신", "서", "권", "황", "안", "송", "류", "홍", "전", "고", 
            "문", "송", "양", "배", "백", "허", "남", "김", "김", "이", "박"};
        String randLast = (String)getRandomElement(lastNames);
        return randLast;
    }

    private String getRandomFirstName() {
        String[] firstNames = {"정훈", "미경", "성호", "은주", "정호", "미영", "성진", "은영", 
            "성훈", "경희", "영수", "은경", "상훈", "정희", "영호", "은정", "준호", "미숙", 
            "가람", "가온", "가을", "겨운", "겨레", "겨울", "결", "고은", "구슬", "그림", 
            "기리", "꽃님", "꽃뜰", "꽃잎", "나라", "나래", "나무", "난새", "누리", "노을", 
            "다래", "다솔", "다슬", "다운", "다정", "다해", "단비", "달", "달래", "대솔", 
            "동녘", "두리", "둘리", "라온", "루리", "루마", "롤프", "마루", "마음", "맑음", 
            "무늬", "미리내", "미르", "믿음", "바다", "바람", "바우", "반디", "밤비", "버들", 
            "별", "별님", "별비", "보라", "보람", "보미", "보슬", "봄", "봄이", "빛", 
            "빛나라", "빛가람", "빛내리", "빛찬", "사랑", "새론", "새롬", "새봄", "새미", "샛별", 
            "샘", "소라", "소담", "소리", "솔", "솔비", "솔잎", "슬", "슬기", "슬미", 
            "슬비", "슬아", "슬이", "아람", "아름", "아리", "여름", "열매", "예슬", "예은", 
            "우람", "우리", "유리", "으뜸", "은별", "은비", "이슬", "잎새", "잔디", "조은", 
            "제나", "진솔", "진해", "초롱", "초록", "큰별", "포근", "푸름", "풀잎", "파란", 
            "하나", "하늘", "하늬", "하루", "하얀", "하은", "하양", "한결", "한길", "한별", 
            "한누리", "한불", "한빛", "한샘", "한솔", "한얼", "한움", "해솔", "햇님", "햇살", 
            "혜윰", "힘찬", "미나", "진호", "현숙", "헌범", "수희", "수원", "지연"};
        String randLast = (String)getRandomElement(firstNames);
        return randLast;
    }
    
    private String getRandomMidChar() {
        String[] midChars = {"가", "나", "다", "라", "마", "바", "사", "자", 
            "노", "구", "노", "아", "허", "로", "도", "누", "배", "하", "호",
            "고", "노", "도", "로", "모", "보", "소", "오", "조",
            "구", "누", "두", "루", "무", "부", "수", "우", "주"
        };
        String randMid = (String)getRandomElement(midChars);
        return randMid;
    }
    
    Random rand = new Random();
    
    private String digitStr(int n) {
        
        int max = (int)Math.pow(10, n);
        int snum = rand.nextInt(max);
        String format = "%0" + n + "d";
        String result = String.format(format, snum);
        
        return result;
    }
    
    private String getRandomCellNumber() {
        return "010-" + digitStr(4) + "-" + digitStr(4);
    }
    
    private String getRandomLandLine() {
        return "02-" + digitStr(3) + "-" + digitStr(4);
    }

    private boolean affiliChosen() {
        return rand.nextBoolean();
    }

    private short getRandomL2_no() {
        int L2_sn = (Integer)getRandomElement(L2_sn_arr);
        return (short)L2_sn;        
    }

    private int getRandomUnitSN() {
        int unit_sn = (Integer)getRandomElement(unit_sn_arr);
//        int unit_sn = ;
        return unit_sn;     
    }

    private int insertDriver2DB(String driverName, String cellPhone, String landLine, 
            String L2_noStr, String unitSNstr) 
    {
        Connection conn = null;
        PreparedStatement createDriver = null;
        String excepMsg = "failed creation of a car driver: " + driverName;

        int result = 0;
        try {
            //<editor-fold desc="insert the new driver into the database">
            String sql = "Insert Into cardriver (name, CELLPHONE, PHONE, L2_NO" +
                            ", UNIT_SEQ_NO, CREATIONDATE)" + 
                            " Values (?, ?, ?, ?, ?, current_timestamp)";

            conn = getConnection();
            createDriver = conn.prepareStatement(sql);
            createDriver.setString(DriverCol.DriverName.getNumVal(), driverName);
            createDriver.setString(DriverCol.CellPhone.getNumVal(), cellPhone);
            createDriver.setString(DriverCol.LandLine.getNumVal(), landLine);
            createDriver.setString(DriverCol.AffiliationL2.getNumVal() - 1, L2_noStr);
            createDriver.setString(DriverCol.UnitNo.getNumVal() - 2, unitSNstr);

            result = createDriver.executeUpdate();
            //</editor-fold>
        } catch (SQLException ex) {
            if (ex.getErrorCode() == ER_DUP_ENTRY) {
                System.out.println("");
            }
        } finally {
            closeDBstuff(conn, createDriver, null, excepMsg);
            return result;
        }
    }
    
    private void insertDriversActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertDriversActionPerformed

        L2_sn_arr = init_int_key_arr("select L2_No from l2_affiliation");
        unit_sn_arr = init_int_key_arr("select seq_no from building_unit");
        
        // create driver name randomly
        insertTableRows(DRIVER, 1000, 0);
    }//GEN-LAST:event_insertDriversActionPerformed

    private int createNewVehicle() {
        String tagNumber = getTagNumber();
        boolean wholeCmp = false; // Car number comparison using whole characters.
        boolean parkPermed = false; // Parking is permitted at the moment.

        if (rand.nextFloat() > 0.99) {
            wholeCmp = true;
        } else {
            wholeCmp = false;
        }

        // select permitted at 90%
        if (rand.nextFloat() > 0.05) {
            parkPermed = true;
        } else {
            parkPermed = false;
        }
        
        return createAndInsertOneCar(tagNumber, wholeCmp, parkPermed);
    }
    
    private int createNewDriver() {
        int result = 0;
        String driverName = getRandomLastName() + getRandomFirstName();
        
        // create cell or phone or both number randomly
        PhoneType phoneType = getPhoneType();
        
        String cellPhone = getRandomCellNumber();
        String phoneNumber = null;
        
        if (phoneType == PhoneType.landLine) {
            phoneNumber = getRandomLandLine();
        }
        
        // choose L2_no or unit_seq_no randomly
        short L2_no = 0;
        int unitSN = 0;
        
        if (affiliChosen()) {
            L2_no = getRandomL2_no();
        } else {
            unitSN = getRandomUnitSN();
        }
        
        String L2_noStr = (L2_no == 0 ? null : Integer.toString(L2_no));
        String unitSNstr = (unitSN == 0 ? null : Integer.toString(unitSN));
        
        // insert a driver with all the info generated randomly  
        result = insertDriver2DB(driverName, cellPhone, phoneNumber, L2_noStr, unitSNstr);

        return result;                    
    }  
    
    private void deleteDriversActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDriversActionPerformed
        deleteTable(this, "cardriver", null, DRIVER.getContent());
        updateDriverCount();
        updateVehicleCount();
    }//GEN-LAST:event_deleteDriversActionPerformed

    private void insertVehiclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertVehiclesActionPerformed
        // Init a kind of database for the random driver selection.
        driver_sn_arr = init_int_key_arr("select seq_no from cardriver");
        
        int createdVehicles = insertFourVehiclesWithImage();
        insertTableRows(VEHICLE, 1000 - createdVehicles, createdVehicles);
    }//GEN-LAST:event_insertVehiclesActionPerformed

    private void deleteVehiclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteVehiclesActionPerformed
        deleteTable(this, "vehicles", null, VEHICLE.getContent());
        vehicleCount.setText(String.valueOf(getRecordCount("vehicles", -1)));                
    }//GEN-LAST:event_deleteVehiclesActionPerformed

    private void updateBuildingCount() {
        buildCount.setText(String.valueOf(getRecordCount("BUILDING_TABLE", -1)));    
        unitCount.setText(String.valueOf(getRecordCount("building_unit", -1)));    
    }
    
    private void updateAffiliCount() {
        L1_Count.setText(String.valueOf(getRecordCount("L1_Affiliation", -1)));    
        L2_Count.setText(String.valueOf(getRecordCount("L2_Affiliation", -1)));            
    }
    
    private void deleteAffiliationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAffiliationActionPerformed
        deleteTable(this, "L1_Affiliation", null, L1_AFFILI.getContent());
        updateAffiliCount();
        
        deleteTable(this, "BUILDING_TABLE", null, BUILDING.getContent());
        updateBuildingCount();
        
        updateDriverCount();
        updateVehicleCount();
    }//GEN-LAST:event_deleteAffiliationActionPerformed

    private void deleteLoginsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLoginsActionPerformed
        deleteTable(this, "LoginRecord", null, LOG_IN.getContent());
    }//GEN-LAST:event_deleteLoginsActionPerformed

    private void deleteSysRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSysRunActionPerformed
        deleteTable(this, "SystemRun", null, SYS_RUN.getContent());
    }//GEN-LAST:event_deleteSysRunActionPerformed

    private void deleteArrivalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteArrivalsActionPerformed
        deleteTable(this, "Car_Arrival", null, ARRIVAL.getContent());
    }//GEN-LAST:event_deleteArrivalsActionPerformed

    private int createUser(String idCore, int suffix, boolean isManager) {
        Connection conn = null;        
        PreparedStatement createAttendant = null;
        String sql = "Insert Into  users_osp (id, name, password, isManager, " + 
                "cellphone, phone) values (?, ?, md5(?), ?, ?, ?)";
        int result = -1;
        
        String suffixStr = String.format("%d", suffix);
        String userID = idCore + suffixStr;
        String userName = getRandomLastName() + getRandomFirstName();
        
        PhoneType phoneType = getPhoneType();
        
        String phone = null;
        String cell = null;
        
        if (phoneType == PhoneType.landLine) {
            phone = getRandomLandLine();
        } else {
            cell = getRandomCellNumber();
        }
        
        try {
            int pIndex = 1;
            conn = JDBCMySQL.getConnection();
            createAttendant = conn.prepareStatement(sql);
            
            // <editor-fold defaultstate="collapsed" desc="-- Provide actual value to each field">
            createAttendant.setString(pIndex++, userID);
            createAttendant.setString(pIndex++, userName);
            createAttendant.setString(pIndex++, PASSWORD);
            if (isManager) {
                createAttendant.setInt(pIndex++, 1);
            } else {
                createAttendant.setInt(pIndex++, 0);
            }
            createAttendant.setString(pIndex++, cell);
            createAttendant.setString(pIndex++, phone);
            // </editor-fold>

            result = createAttendant.executeUpdate();

        } catch (SQLException ex) {
            System.out.println("User Insert exception");
        } finally {
            closeDBstuff(conn, createAttendant, null, "(ID: " + userID + ")");
            return result;
        }           
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        readSettings();        
                
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataGUI(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L1_Count;
    private javax.swing.JLabel L2_Count;
    private javax.swing.JButton affiliationsButton;
    private javax.swing.JLabel attendantCount;
    private javax.swing.JLabel buildCount;
    private javax.swing.JButton buildingsButton;
    private javax.swing.JButton deleteAffiliation;
    private javax.swing.JButton deleteAll_no_admin;
    private javax.swing.JButton deleteArrivals;
    private javax.swing.JButton deleteDrivers;
    private javax.swing.JButton deleteLogins;
    private javax.swing.JButton deleteSysRun;
    private javax.swing.JButton deleteVehicles;
    private javax.swing.JLabel driverCount;
    private javax.swing.JButton general100;
    private javax.swing.JButton insertDrivers;
    private javax.swing.JButton insertVehicles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton manager5;
    private final javax.swing.JProgressBar progressBar = new javax.swing.JProgressBar();
    private javax.swing.JButton quitProgram;
    private javax.swing.JLabel unitCount;
    private javax.swing.JLabel vehicleCount;
    // End of variables declaration//GEN-END:variables

    private int insertRedords(String insertSQL) {
        Connection conn = null;
        Statement insertStmt = null;
        int resultCount = 0;
        try {
            conn = JDBCMySQL.getConnection();
            insertStmt = conn.createStatement();
            resultCount = insertStmt.executeUpdate(insertSQL);

            JOptionPane.showMessageDialog(this, 
                    "Inserted record count : " + resultCount,
                    "Creation result", JOptionPane.PLAIN_MESSAGE);
        } catch (Exception se) {
            JOptionPane.showMessageDialog(this, 
                    "Inserted record count : " + resultCount,
                    "Creation Error", JOptionPane.ERROR_MESSAGE);
        }  finally {
            closeDBstuff(conn, insertStmt, null, "Record Insertion via GUI");
            return resultCount;
        }       
    }

    private PhoneType getPhoneType() {
        int r = rand.nextInt(2);
        PhoneType type = PhoneType.values()[r];
        return type;
    }

    private Object[] init_int_key_arr(String sqlStmt) {

        Connection conn = null;
        Statement selectStmt = null;
        ArrayList<Integer> numList = new ArrayList<Integer>();
        ResultSet rs = null;
        
        try {
            conn = JDBCMySQL.getConnection();
            selectStmt = conn.createStatement();
            rs = selectStmt.executeQuery(sqlStmt);
            while (rs.next() ) {
                int seqNo = rs.getInt(1);
                numList.add(seqNo);
            }
        } catch (SQLException ex) {
        } finally {
            closeDBstuff(conn, selectStmt, rs, "(Loading passing delay records)");
            return (numList.toArray());
        }
    }

    private int createVehicle(String plateNo, int driverSN, boolean notifySelected, 
            boolean wholeSelected, boolean parkPermitted, String reasonText, 
            String otherInfoText) 
    {
        Connection conn = null;
        PreparedStatement createDriver = null;

        int result = 0;
        try {
            StringBuffer sb = new StringBuffer("Insert Into Vehicles (");
            sb.append(" PLATE_NUMBER, DRIVER_SEQ_NO, NOTI_REQUESTED,");
            sb.append(" WHOLE_REQUIRED, PERMITTED, Remark, OTHER_INFO, ");
            sb.append(" CREATIONDATE) Values (?, ?, ?, ?, ?, ?, ?, current_timestamp)");

            conn = getConnection();
            createDriver = conn.prepareStatement(sb.toString());
            int loc = 1;
            
            createDriver.setString(loc++, plateNo);
            createDriver.setInt(loc++, driverSN);
            createDriver.setInt(loc++, notifySelected ? 1 : 0);
            createDriver.setInt(loc++, wholeSelected? 1 : 0);
            createDriver.setInt(loc++, parkPermitted ? 0 : 1);
            createDriver.setString(loc++, reasonText);
            createDriver.setString(loc++, otherInfoText);
            
            result = createDriver.executeUpdate();
        } catch (SQLException e) {
        } finally {
            closeDBstuff(conn, createDriver, null, "");
        }
        
        return result;     
    }

    private String getTagNumber() {
        String tagNumber = null;
        
        // whole country number
        
        String twoDigit = digitStr(2);
        String midChar = getRandomMidChar();
        String fourDigit = digitStr(4);
        
        tagNumber = twoDigit + midChar + fourDigit;
        if (rand.nextInt() % 2 == 0) {
            // insert prefix and make it a provincial tag number 
            tagNumber = "서울" + tagNumber;
            
        }
        return tagNumber;
    }

    private void updateDriverCount() {
        driverCount.setText(String.valueOf(getRecordCount("cardriver", -1)));        
    }

    private void updateVehicleCount() {
        vehicleCount.setText(String.valueOf(getRecordCount("vehicles", -1)));
    }

    /**
     * Insert one dummy car into the Vehicles table.
     * 
     * @param tagNumber License plate number of the vehicle.
     * @param wholeCmp Tells whether single Korean character also need to be compared.
     * @param parkPermed Tells if parking is permitted or not.
     * @return the number of inserted vehicles. (Usually 1.)
     */
    private int createAndInsertOneCar(String tagNumber, boolean wholeCmp, 
            boolean parkPermed) 
    {
            //<editor-fold desc="Generate vehicle property values">
            // generate necessary and optional field values
            // generate plate number

            // choose a random driver
            Integer driverSN = (Integer)getRandomElement(driver_sn_arr);

            // select notify at 70%
            boolean notify = false;
            if (rand.nextFloat() > 0.3) {
                notify = true;
            }

            // select reason text at 20%
            String reasonStr = null;
            if (!parkPermed) {
                if (rand.nextInt() % 2 == 0) {
                    reasonStr = "주차위반";
                } else {
                    reasonStr = "퇴거";
                }
            }

            // select other info at 30%
            String otherInfo = null;
            if (rand.nextFloat() > 0.7) {
                float chance = rand.nextFloat();
                if (chance < 0.3) {
                    otherInfo = "현대";
                } else if (chance < 0.5) {
                    otherInfo = "기아";
                } else if (chance < 0.7) {
                    otherInfo = "삼성";
                } else if (chance < 0.85) {
                    otherInfo = "폭스바겐";
                } else {
                    otherInfo = "벤츠";
                } 
            }
            //</editor-fold>

            // Create a vehicle using those prepared field values
            return createVehicle(tagNumber, driverSN, notify, 
                    wholeCmp, parkPermed, reasonStr, otherInfo);
    }

    private int insertFourVehiclesWithImage() {
        int count = 0;
        
        for (byte i = 1; i <= 2; i++) {
            count += createAndInsertOneCar(Globals.getTagNumber(i), false, true);
        }
        count += createAndInsertOneCar(Globals.getTagNumber((byte)3), true, true);
        count += createAndInsertOneCar(Globals.getTagNumber((byte)4), true, false);
        
        return count;
    }

    /**
     * @return the insertProgress
     */
    public javax.swing.JProgressBar getProgressBar() {
        return progressBar;
    }

    private final static MouseAdapter mouseAdapter = new MouseAdapter(){};
    private void insertTableRows(final ControlEnums.RowName table, final int target,
            final int preInsert) 
    {
        final DataGUI parentThis = this;
        
        JComponent jComp = (JComponent)parentThis.getContentPane();
        final RootPaneContainer root = (RootPaneContainer)jComp.getTopLevelAncestor();
        
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        root.getGlassPane().addMouseListener(mouseAdapter);
        root.getGlassPane().setVisible(true);        
        
        Thread t = new Thread(){
            public void run(){
                int previous = 0, progress;
                int creationCount = 0;
                
                while (creationCount < target) {
                    if (table == DRIVER) {
                        creationCount += createNewDriver();
                    } else if (table == VEHICLE) {
                        creationCount += createNewVehicle();
                    }
                    progress = (int)(creationCount/(float)target * 100);
                    if (progress > previous) {
                        final int percent = progress;
                        progressBar.setValue(progress);
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                progressBar.setValue(percent);
                            }
                        });
                        previous = progress;
                    }
                }
                if (table == DRIVER) {
                    updateDriverCount();
                } else if (table == VEHICLE) {
                    updateVehicleCount();
                }                

                JOptionPane.showMessageDialog(parentThis, 
                        table + " creation count: " + (creationCount + preInsert),
                        "Insertion Result", JOptionPane.PLAIN_MESSAGE);  
                setCursor(null);
                root.getGlassPane().addMouseListener(mouseAdapter);
                root.getGlassPane().setVisible(false);        
                
                progressBar.setValue(0);
            }
        };    
        t.start();
    }

    public enum PhoneType {
        cellPhone,
        landLine
    }
}
