/* 
 * Copyright (C) 2015, 2016  Open Source Parking, Inc.(www.osparking.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.osparking.vehicle;

import com.osparking.global.Globals;
import static com.osparking.global.Globals.OSPiconList;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultCaret;
import static com.osparking.global.Globals.RET_CANCEL;
import static com.osparking.global.Globals.createStretchedIcon;
import static com.osparking.global.Globals.font_Size;
import static com.osparking.global.Globals.font_Style;
import static com.osparking.global.Globals.font_Type;
import static com.osparking.global.Globals.language;
import static com.osparking.global.Globals.logParkingException;
import static com.osparking.global.names.ControlEnums.ButtonTypes.CLOSE_BTN;
import static com.osparking.global.names.ControlEnums.DialogTitleTypes.ODS_HELP_TITLE;
import com.osparking.global.names.ControlEnums.TextType;
import static com.osparking.global.names.DB_Access.parkingLotLocale;
import com.osparking.global.names.ImageDisplay;
import com.osparking.global.names.OSP_enums.ODS_TYPE;
import java.awt.Dimension;

/**
 *
 * @author Open Source Parking Inc.
 */
public class ODS_HelpJDialog extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int REOT_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    
    ODS_TYPE odsType;

    /**
     * Creates new form NewOkCancelDialog
     */
    public ODS_HelpJDialog(java.awt.Frame parent, boolean modal, String helpTitle, 
            ODS_TYPE odsType) {        
        super(parent, modal);
        this.odsType = odsType;
        initComponents();
        setIconImages(OSPiconList);

        String title = odsType + " " + ODS_HELP_TITLE.getContent();
        
        setTitle(title);
        int imgLblWidthBefore = odsHelpLabel.getPreferredSize().width;
        int imgLblHeightBefore = odsHelpLabel.getPreferredSize().height;
        setHelpContents(helpTitle, odsType);
        int imgLblWidthAfter = odsHelpLabel.getPreferredSize().width;
        int imgLblHeightAfter = odsHelpLabel.getPreferredSize().height;
        int widthDiff = imgLblWidthAfter - imgLblWidthBefore;
        int heightDiff = imgLblHeightAfter - imgLblHeightBefore;
        
        Dimension size = getSize();
        Dimension newSize = new Dimension(size.width + widthDiff, 
                size.height + heightDiff);
        setPreferredSize(newSize);
        setSize(newSize);
        setResizable(false);

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        westFiller = new javax.swing.Box.Filler(new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 32767));
        topFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 40), new java.awt.Dimension(32767, 20));
        centerPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        jPanel3 = new javax.swing.JPanel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(90, 0), new java.awt.Dimension(90, 0), new java.awt.Dimension(90, 0));
        HelpTitleLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane(topTextArea,
            JScrollPane.VERTICAL_SCROLLBAR_NEVER,
            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED
        );
        topTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        odsHelpLabel = new javax.swing.JLabel();
        botFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 40), new java.awt.Dimension(32767, 20));
        eastFiller = new javax.swing.Box.Filler(new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 0), new java.awt.Dimension(40, 32767));

        setTitle("Help on ods File");
        setMinimumSize(new java.awt.Dimension(560, 550));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        getContentPane().add(westFiller, java.awt.BorderLayout.LINE_START);
        getContentPane().add(topFiller, java.awt.BorderLayout.NORTH);

        centerPanel.setLayout(new javax.swing.BoxLayout(centerPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(filler1, java.awt.BorderLayout.SOUTH);

        jPanel3.setMinimumSize(new java.awt.Dimension(217, 30));

        HelpTitleLabel.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        HelpTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HelpTitleLabel.setText("<Help Window Title>");
        HelpTitleLabel.setToolTipText("");
        HelpTitleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        HelpTitleLabel.setMaximumSize(new java.awt.Dimension(200, 23));
        HelpTitleLabel.setMinimumSize(new java.awt.Dimension(200, 23));
        HelpTitleLabel.setPreferredSize(new java.awt.Dimension(200, 23));

        closeButton.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        closeButton.setMnemonic('C');
        closeButton.setText(CLOSE_BTN.getContent());
        closeButton.setMaximumSize(new java.awt.Dimension(90, 40));
        closeButton.setMinimumSize(new java.awt.Dimension(90, 40));
        closeButton.setPreferredSize(new java.awt.Dimension(90, 40));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(HelpTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(HelpTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(6, 6, 6))
        );

        getRootPane().setDefaultButton(closeButton);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        centerPanel.add(jPanel1);

        jScrollPane1.setHorizontalScrollBar(null);

        topTextArea.setEditable(false);
        topTextArea.setColumns(20);
        topTextArea.setFont(new java.awt.Font(font_Type, font_Style, font_Size));
        topTextArea.setRows(5);
        topTextArea.setMaximumSize(new java.awt.Dimension(32767, 32767));
        topTextArea.setPreferredSize(new java.awt.Dimension(511, 94));
        jScrollPane1.setViewportView(topTextArea);

        centerPanel.add(jScrollPane1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        odsHelpLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        odsHelpLabel.setToolTipText("Click to Close");
        odsHelpLabel.setPreferredSize(new java.awt.Dimension(572, 378));
        odsHelpLabel.setVerifyInputWhenFocusTarget(false);
        odsHelpLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                odsHelpLabelMouseMoved(evt);
            }
        });
        odsHelpLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                odsHelpLabelMouseClicked(evt);
            }
        });
        jPanel2.add(odsHelpLabel, java.awt.BorderLayout.CENTER);

        centerPanel.add(jPanel2);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);
        getContentPane().add(botFiller, java.awt.BorderLayout.SOUTH);
        getContentPane().add(eastFiller, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void odsHelpLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odsHelpLabelMouseClicked
        if (Globals.DEBUG) {
            System.out.println("x: " + evt.getX() + ", y: " + evt.getY());
        }
                
        if (mouseInWrongExampleImageButton(evt.getX(), evt.getY())) {
            String imgFilename = null;
            String title = null;

            if (odsType == ODS_TYPE.AFFILIATION) {
                switch(parkingLotLocale.getLanguage()){
                    case "ko" :
                        imgFilename = "/affiliation_wrong_Kor.png";
                        title = "잘못된 소속 ods 사례";
                        break;
                    default:
                        imgFilename = "/affiliation_wrong_Eng.png";
                        title = "Wrong Affiliation Example in ods file";
                        break;
                }
            }  else {
                switch(parkingLotLocale.getLanguage()){
                    case "en" :
                    case "ko" :
                        imgFilename = "/building_wrong_Kor.png";
                        title =  "잘못된 건물 ods 사례";
                        break;
                    default:
                        imgFilename = "/building_wrong_Eng.png";
                        title = "Wrong Building Example in ods file";
                        break;
                }
            }
            ImageDisplay bigImage = new ImageDisplay(imgFilename, title);
            bigImage.setVisible(true);               
        } 
    }//GEN-LAST:event_odsHelpLabelMouseClicked

    private void odsHelpLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odsHelpLabelMouseMoved
        boolean mouseCurrentlyInImageButton 
                = mouseInWrongExampleImageButton(evt.getX(), evt.getY());
        
        if (mousePreviouslyInImageButton)
        {
            if (!mouseCurrentlyInImageButton) {
                odsHelpLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                mousePreviouslyInImageButton = false;
            }            
        } else {
            if (mouseCurrentlyInImageButton) {
                odsHelpLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
                mousePreviouslyInImageButton = true;
            }
        }
    }//GEN-LAST:event_odsHelpLabelMouseMoved
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel HelpTitleLabel;
    private javax.swing.Box.Filler botFiller;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.Box.Filler eastFiller;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel odsHelpLabel;
    private javax.swing.Box.Filler topFiller;
    private javax.swing.JTextArea topTextArea;
    private javax.swing.Box.Filler westFiller;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;

    private void setHelpContents(String helpTitle, ODS_TYPE odsType) {
        HelpTitleLabel.setText(helpTitle);
        
        DefaultCaret caret = (DefaultCaret)topTextArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);   
        topTextArea.setText(TextType.HELP_TA.getContent());
        
        ImageIcon odsHelp_icon = null;
        String filename = null;
        
        switch (odsType) {
            case AFFILIATION:
                switch(language){
                    case ENGLISH:
                        filename = "/affiliation_Eng.png";
                        break;
                    default:
                       filename = "/affiliation_Kor.png";
                       break;
                }
                break;
            case BUILDING:
                switch(language){
                    case ENGLISH:
                        filename = "/building_Eng.png";
                        break;
                    default:
                        filename = "/building_Kor.png";
                        break;
                }
                break;
            case DRIVER:
                switch(language){
                    case ENGLISH:
                        filename = "/read_driver_ods_sampleEng.png";
                        break;
                    default:
                        filename = "/read_driver_ods_sample.png";
                        break;
                }
                break;
            case VEHICLE:
                switch(language){
                    case ENGLISH:
                        filename = "/vehicle_Eng.png";
                        break;
                    default:
                        filename = "/vehicle_Kor.png";
                        break;
                }
                break;
            default:
                break;
        }
        
        try {
            BufferedImage originalImg = ImageIO.read(getClass().getResource(filename));
            odsHelpLabel.setPreferredSize(new Dimension(originalImg.getWidth(), originalImg.getHeight()));
            odsHelp_icon = createStretchedIcon(odsHelpLabel.getPreferredSize(), originalImg, false);
            
        } catch (Exception ex) {
            logParkingException(Level.SEVERE, ex, "(while stretching help image file");
        }
        odsHelpLabel.setIcon(odsHelp_icon); 
    }

    private static boolean mousePreviouslyInImageButton = false;
    
    private boolean mouseInWrongExampleImageButton(int xAxis, int yAxis) {

        if (odsType == ODS_TYPE.AFFILIATION) {
            if (xAxis > 365 && xAxis < 545 && yAxis > 315 && yAxis < 333)
            {
                return true;
            }
            else
            {
                return false;
            }
        } else {
            if (xAxis > 364 && xAxis < 545 && yAxis > 315 && yAxis < 333)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
